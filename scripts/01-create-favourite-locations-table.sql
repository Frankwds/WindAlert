-- Create the favourite_locations table
CREATE TABLE public.favourite_locations (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id UUID NOT NULL REFERENCES public.users(id) ON DELETE CASCADE,
  location_id BIGINT NOT NULL REFERENCES public.paragliding_locations(id) ON DELETE CASCADE,
  created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  notify_today BOOLEAN DEFAULT FALSE NOT NULL,
  notify_tomorrow BOOLEAN DEFAULT FALSE NOT NULL,
  notify_in_two_days BOOLEAN DEFAULT FALSE NOT NULL,
  CONSTRAINT unique_user_location UNIQUE (user_id, location_id)
);

-- Enable Row Level Security (RLS)
ALTER TABLE public.favourite_locations ENABLE ROW LEVEL SECURITY;

-- Create policies for RLS
-- Users can see their own favourites
CREATE POLICY "Enable read access for users' own favourites"
ON public.favourite_locations
FOR SELECT
USING (auth.uid() = user_id);

-- Users can insert their own favourites
CREATE POLICY "Enable insert for users' own favourites"
ON public.favourite_locations
FOR INSERT
WITH CHECK (auth.uid() = user_id);

-- Users can delete their own favourites
CREATE POLICY "Enable delete for users' own favourites"
ON public.favourite_locations
FOR DELETE
USING (auth.uid() = user_id);

-- Users can update their own favourites
CREATE POLICY "Enable update for users' own favourites"
ON public.favourite_locations
FOR UPDATE
USING (auth.uid() = user_id)
WITH CHECK (auth.uid() = user_id);
